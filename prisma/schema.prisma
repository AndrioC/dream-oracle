datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int            @id @default(autoincrement())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  dreams        Dream[]
  credits       Credit?
  accounts      Account[]
  sessions      Session[]
  UserSettings  UserSettings?
  likes         DreamLike[]
  comments      DreamComment[]
  Notification  Notification[]
}

model Dream {
  id             Int            @id @default(autoincrement())
  title          String
  description    String
  date           DateTime
  isPublic       Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         Int
  interpretation String?
  imageUrl       String?
  imageStyle     String?
  likes          DreamLike[]
  comments       DreamComment[]

  user         User           @relation(fields: [userId], references: [id])
  Notification Notification[]
}

model DreamLike {
  id        Int      @id @default(autoincrement())
  dreamId   Int
  userId    Int
  createdAt DateTime @default(now())

  dream Dream @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([dreamId, userId])
}

model DreamComment {
  id        Int      @id @default(autoincrement())
  dreamId   Int
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dream Dream @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Credit {
  id        Int      @id @default(autoincrement())
  amount    Int      @default(2)
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSettings {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  language String @default("pt-BR")
  theme    String @default("system")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  dreamId   Int
  userId    Int
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  dream Dream @relation(fields: [dreamId], references: [id])
}
